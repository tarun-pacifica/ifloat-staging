ifloat
======

The ifloat application manages a database of products/services in order to allow a user to quickly filter through potentially millions of items using an exclusions-based filtering system. Having found the product(s) they want, the customer can then proceed out to any vending retailer to complete a purchase, which is tracked by the application.

The database schema is designed to allow arbitrary data (particularly PropertyValue and Asset objects) to be associated with each product and for products to be inter-related / filtered via that data. Thus the product-related sections of the schema could be said to simulate and OO database on top of a relational one (schema-free design).

All further understanding can be gleaned from reading the code. Start with app/controllers/tools.rb (thence importer/import.rb) if you want to understand how product data is manipulated. Indexer.rb is a large in-memory caching architecture that forms the backbone of the app. Almost everything else is handled in a semi-RESTful manner. Note that housekeeping tasks can be found in lib/housekeeping.

Tech Stack
----------

The ifloat application stack (from the top down) consists of the following technologies...

1. frontend: HTML + CSS + Javascript (the latter being required by all clients who wish to interact with the basket functionality)

2. app server: written in Ruby using Merb + DataMapper and hosted on Thin (see the Gemfile for a complete list of Ruby libs in use)

3. persistence / caching: MySQL / Tokyo Cabinet

4. cloud file storage: Rackspace CloudFiles

5. virtual hosting: Rackspace CloudServers

6. source control: git (on a virtual host) handling four repos (app code 'ifloat', app data 'ifloat_csvs', app images etc... 'ifloat_assets' and prices 'ifloat_prices')

7. development: all development conducted using non-IDE editors (emacs / Texmate / Sublime Edit 2)

Deployment
----------

ifloat is hosted across three servers...

1. repo server: houses all git repos and automates price gathering from partners

2. staging app: staging environment for testing new releases and allowing Graeme to stage / experiment with product data updates

3. production app: customer-facing environment

Staging and production use essentially identical configurations, the repo server is a little simpler. Instructions for each type can be found in server_setup.txt. Note that the information therein will also be useful in configuring any development environment.

The deployment process from development should work like this...

1. commit

2. push to repo server

3. ssh to staging app server as www-data

4. run 'pull' (which is set up as an alias to pull on the source code repo from the repo server)

5. run 'restart' (which is an alias set up to bounce the app server)

6. Graeme reviews any changes as needed

7a. run 1-6 again until Graeme approves or...

7b. run 3-5 on production

Services / Credentials
----------------------

Rackspace via manage.rackspacecloud.com : pristine / TND869ab
Mail is sent via authsmtp.com: ac47472 / UOE869
DNS is via Godaddy: 19354750 / ank068171
Their webmail service webmail.ifloat.biz: admin@ifloat.biz / HjkxJeqK
Google account: admin@ifloat.biz / UOE8%$69

[root passwords]
repo.ifloat.biz : ifloat-repoyUUoYJ
staging.ifloat.biz : ifloat-app-staging-01EkXYRc
www.ifloat.biz : ifloat-app-production-01ikvP0F5P4